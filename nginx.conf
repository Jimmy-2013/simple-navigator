# /home/nginx/nginx.conf (完整版)

# 定义运行 Nginx 进程的用户
user  nginx;
# 定义工作进程的数量，auto 会根据 CPU 核心数自动设置
worker_processes  auto;

# 错误日志文件路径和级别
error_log  /var/log/nginx/error.log warn;
# Nginx 主进程的 PID 文件路径
pid        /var/run/nginx.pid;

# 事件模块配置
events {
    # 每个工作进程的最大连接数
    worker_connections  1024;
}

# HTTP 块：所有 Web 服务器相关的配置都放在这里
http {
    # 包含 MIME 类型映射文件
    include       /etc/nginx/mime.types;
    # 默认 MIME 类型
    default_type  application/octet-stream;

    # 日志格式定义
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 访问日志文件路径和格式
    access_log  /var/log/nginx/access.log  main;

    # 启用 sendfile 优化文件传输
    sendfile        on;
    # 启用 tcp_nopush 和 tcp_nodelay 优化 TCP 传输
    tcp_nopush     on;
    tcp_nodelay    on;

    # keep-alive 连接的超时时间
    keepalive_timeout  65;
    # 提高 types_hash_max_size 以避免哈希冲突警告
    types_hash_max_size 2048;

    # =================================================================
    # 您的服务器块：直接放在 http 块内部
    # =================================================================
    server {
        # 监听 80 端口
        listen 80;
        server_name localhost; # 可以替换为您的域名或 IP

        # 设置网站文件的根目录
        root /usr/share/nginx/html;

        # 默认首页文件
        index index.html;

        # 配置所有请求都指向 index.html，这对于单页应用很常见
        location / {
            try_files $uri $uri/ /index.html;
        }

        # API 请求反向代理到 Node.js 后端
        location /api/ {
            # 代理到容器内部的 Node.js 服务，它监听 3003 端口
            proxy_pass http://localhost:3003;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 优化静态文件的缓存
        location ~* \.(css|js|ico|png|jpg|jpeg|gif)$ {
            expires 1d;
            add_header Cache-Control "public, no-transform";
        }
    }
    # =================================================================
    # 服务器块结束
    # =================================================================
}
